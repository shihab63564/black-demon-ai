
# main.py
# This is your bot with inline buttons for 24/7 hosting

import os
import json
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
OWNER_CHAT_ID = int(os.environ.get("OWNER_CHAT_ID", "7435632959"))
UID_MAP_FILE = "uids_button_map.txt"

if os.path.exists(UID_MAP_FILE):
    with open(UID_MAP_FILE, "r", encoding="utf-8") as f:
        pending_uids = json.load(f)
else:
    pending_uids = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists("logo.png"):
        with open("logo.png", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=(
                    "ü§ñ AI SIGNAL ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶° ‡¶π‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶ü‡ßá‡¶ï‡ßç‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶è‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§\n\n"
                    "‚úÖ ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá‡•§\n\n"
                    "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá @TraderFxOfficial ‡¶Ü‡¶á‡¶°‡¶ø‡¶§‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®‡•§"
                )
            )

async def handle_uid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id == OWNER_CHAT_ID:
        return

    message_text = update.message.text.strip()
    user = update.message.from_user

    if re.fullmatch(r'\d{6,}', message_text):
        await update.message.reply_text(
            "‚úÖ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ UID ‡¶ü‡¶ø ‡¶™‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø, ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá‡•§"
        )

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve:{user.id}"),
                InlineKeyboardButton("‚ùå Reject", callback_data=f"reject:{user.id}")
            ]
        ])

        forward_text = (
            f"üîî <b>‡¶®‡¶§‡ßÅ‡¶® UID:</b> <code>{message_text}</code>\n"
            f"üë§ <b>Username:</b> @{user.username or 'NoUsername'}\n"
            f"üÜî <b>User ID:</b> <code>{user.id}</code>"
        )

        sent = await context.bot.send_message(
            chat_id=OWNER_CHAT_ID,
            text=forward_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        pending_uids[str(sent.message_id)] = user.id
        with open(UID_MAP_FILE, "w", encoding="utf-8") as f:
            json.dump(pending_uids, f)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, user_id_str = query.data.split(":")
    user_id = int(user_id_str)

    if action == "approve":
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üì¢ <b>IMPORTANT NOTICE ‚ÄºÔ∏è</b>\n\n"
                "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá Trade ‡¶ï‡¶∞‡¶¨‡ßá‡¶® , ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡¶ì ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ, "
                "‡¶Ö‡¶®‡ßç‡¶Ø‡¶•‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá VIP ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶¨‡•§\n\n"
                "‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶°‡¶≤‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡ßÅ‡¶ï ‡¶¨‡¶æ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßÅ‡¶ï ‡¶ï‡¶ñ‡¶®‡ßã‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶ü‡ßá‡¶ï‡ßç‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶ü‡¶ø DELETE ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§\n\n"
                "<b>WELCOME TO BLACK DEMON AI üëá</b>\n"
                "https://t.me/+P5KGxa94UfJhYTA1\n"
                "https://t.me/+P5KGxa94UfJhYTA1\n\n"
                "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶æ‡¶∞‡¶£‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ ‚úÖ"
            ),
            parse_mode="HTML"
        )
        await query.edit_message_text(text="‚úÖ Approved and user notified.", parse_mode="HTML")

    elif action == "reject":
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§ , ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá NON MTG AI ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§\n\n"
                 "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ UID ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá, ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø‡¶§‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶® @TraderFxOfficial"
        )
        await query.edit_message_text(text="‚ùå Rejected and user notified.", parse_mode="HTML")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_uid))
app.add_handler(CallbackQueryHandler(handle_buttons))

print("ü§ñ Bot is running with button-based hosting support...")
app.run_polling()
